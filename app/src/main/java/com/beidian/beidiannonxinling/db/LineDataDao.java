package com.beidian.beidiannonxinling.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINE_DATA".
*/
public class LineDataDao extends AbstractDao<LineData, Long> {

    public static final String TABLENAME = "LINE_DATA";

    /**
     * Properties of entity LineData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Eci = new Property(1, String.class, "eci", false, "ECI");
        public final static Property Enodebid = new Property(2, String.class, "enodebid", false, "ENODEBID");
        public final static Property Cellname = new Property(3, String.class, "cellname", false, "CELLNAME");
        public final static Property Linenum = new Property(4, String.class, "linenum", false, "LINENUM");
        public final static Property BBUnum = new Property(5, String.class, "BBUnum", false, "BBUNUM");
        public final static Property RRUnum = new Property(6, String.class, "RRUnum", false, "RRUNUM");
        public final static Property Pci = new Property(7, String.class, "pci", false, "PCI");
        public final static Property Frequency = new Property(8, String.class, "frequency", false, "FREQUENCY");
        public final static Property Workfrequency = new Property(9, String.class, "workfrequency", false, "WORKFREQUENCY");
        public final static Property Downbandwidth = new Property(10, String.class, "downbandwidth", false, "DOWNBANDWIDTH");
        public final static Property Lng = new Property(11, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(12, String.class, "lat", false, "LAT");
        public final static Property Coveragetype = new Property(13, String.class, "Coveragetype", false, "COVERAGETYPE");
        public final static Property Dishi = new Property(14, String.class, "dishi", false, "DISHI");
        public final static Property Quxian = new Property(15, String.class, "quxian", false, "QUXIAN");
        public final static Property Lineservice = new Property(16, String.class, "lineservice", false, "LINESERVICE");
        public final static Property Linetype = new Property(17, String.class, "linetype", false, "LINETYPE");
        public final static Property Directionangle = new Property(18, String.class, "directionangle", false, "DIRECTIONANGLE");
        public final static Property Mechanicalinclination = new Property(19, String.class, "mechanicalinclination", false, "MECHANICALINCLINATION");
        public final static Property Antennaheight = new Property(20, String.class, "antennaheight", false, "ANTENNAHEIGHT");
    }


    public LineDataDao(DaoConfig config) {
        super(config);
    }
    
    public LineDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ids
                "\"ECI\" TEXT," + // 1: eci
                "\"ENODEBID\" TEXT," + // 2: enodebid
                "\"CELLNAME\" TEXT," + // 3: cellname
                "\"LINENUM\" TEXT," + // 4: linenum
                "\"BBUNUM\" TEXT," + // 5: BBUnum
                "\"RRUNUM\" TEXT," + // 6: RRUnum
                "\"PCI\" TEXT," + // 7: pci
                "\"FREQUENCY\" TEXT," + // 8: frequency
                "\"WORKFREQUENCY\" TEXT," + // 9: workfrequency
                "\"DOWNBANDWIDTH\" TEXT," + // 10: downbandwidth
                "\"LNG\" TEXT," + // 11: lng
                "\"LAT\" TEXT," + // 12: lat
                "\"COVERAGETYPE\" TEXT," + // 13: Coveragetype
                "\"DISHI\" TEXT," + // 14: dishi
                "\"QUXIAN\" TEXT," + // 15: quxian
                "\"LINESERVICE\" TEXT," + // 16: lineservice
                "\"LINETYPE\" TEXT," + // 17: linetype
                "\"DIRECTIONANGLE\" TEXT," + // 18: directionangle
                "\"MECHANICALINCLINATION\" TEXT," + // 19: mechanicalinclination
                "\"ANTENNAHEIGHT\" TEXT);"); // 20: antennaheight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LineData entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String eci = entity.getEci();
        if (eci != null) {
            stmt.bindString(2, eci);
        }
 
        String enodebid = entity.getEnodebid();
        if (enodebid != null) {
            stmt.bindString(3, enodebid);
        }
 
        String cellname = entity.getCellname();
        if (cellname != null) {
            stmt.bindString(4, cellname);
        }
 
        String linenum = entity.getLinenum();
        if (linenum != null) {
            stmt.bindString(5, linenum);
        }
 
        String BBUnum = entity.getBBUnum();
        if (BBUnum != null) {
            stmt.bindString(6, BBUnum);
        }
 
        String RRUnum = entity.getRRUnum();
        if (RRUnum != null) {
            stmt.bindString(7, RRUnum);
        }
 
        String pci = entity.getPci();
        if (pci != null) {
            stmt.bindString(8, pci);
        }
 
        String frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindString(9, frequency);
        }
 
        String workfrequency = entity.getWorkfrequency();
        if (workfrequency != null) {
            stmt.bindString(10, workfrequency);
        }
 
        String downbandwidth = entity.getDownbandwidth();
        if (downbandwidth != null) {
            stmt.bindString(11, downbandwidth);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(12, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(13, lat);
        }
 
        String Coveragetype = entity.getCoveragetype();
        if (Coveragetype != null) {
            stmt.bindString(14, Coveragetype);
        }
 
        String dishi = entity.getDishi();
        if (dishi != null) {
            stmt.bindString(15, dishi);
        }
 
        String quxian = entity.getQuxian();
        if (quxian != null) {
            stmt.bindString(16, quxian);
        }
 
        String lineservice = entity.getLineservice();
        if (lineservice != null) {
            stmt.bindString(17, lineservice);
        }
 
        String linetype = entity.getLinetype();
        if (linetype != null) {
            stmt.bindString(18, linetype);
        }
 
        String directionangle = entity.getDirectionangle();
        if (directionangle != null) {
            stmt.bindString(19, directionangle);
        }
 
        String mechanicalinclination = entity.getMechanicalinclination();
        if (mechanicalinclination != null) {
            stmt.bindString(20, mechanicalinclination);
        }
 
        String antennaheight = entity.getAntennaheight();
        if (antennaheight != null) {
            stmt.bindString(21, antennaheight);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LineData entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String eci = entity.getEci();
        if (eci != null) {
            stmt.bindString(2, eci);
        }
 
        String enodebid = entity.getEnodebid();
        if (enodebid != null) {
            stmt.bindString(3, enodebid);
        }
 
        String cellname = entity.getCellname();
        if (cellname != null) {
            stmt.bindString(4, cellname);
        }
 
        String linenum = entity.getLinenum();
        if (linenum != null) {
            stmt.bindString(5, linenum);
        }
 
        String BBUnum = entity.getBBUnum();
        if (BBUnum != null) {
            stmt.bindString(6, BBUnum);
        }
 
        String RRUnum = entity.getRRUnum();
        if (RRUnum != null) {
            stmt.bindString(7, RRUnum);
        }
 
        String pci = entity.getPci();
        if (pci != null) {
            stmt.bindString(8, pci);
        }
 
        String frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindString(9, frequency);
        }
 
        String workfrequency = entity.getWorkfrequency();
        if (workfrequency != null) {
            stmt.bindString(10, workfrequency);
        }
 
        String downbandwidth = entity.getDownbandwidth();
        if (downbandwidth != null) {
            stmt.bindString(11, downbandwidth);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(12, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(13, lat);
        }
 
        String Coveragetype = entity.getCoveragetype();
        if (Coveragetype != null) {
            stmt.bindString(14, Coveragetype);
        }
 
        String dishi = entity.getDishi();
        if (dishi != null) {
            stmt.bindString(15, dishi);
        }
 
        String quxian = entity.getQuxian();
        if (quxian != null) {
            stmt.bindString(16, quxian);
        }
 
        String lineservice = entity.getLineservice();
        if (lineservice != null) {
            stmt.bindString(17, lineservice);
        }
 
        String linetype = entity.getLinetype();
        if (linetype != null) {
            stmt.bindString(18, linetype);
        }
 
        String directionangle = entity.getDirectionangle();
        if (directionangle != null) {
            stmt.bindString(19, directionangle);
        }
 
        String mechanicalinclination = entity.getMechanicalinclination();
        if (mechanicalinclination != null) {
            stmt.bindString(20, mechanicalinclination);
        }
 
        String antennaheight = entity.getAntennaheight();
        if (antennaheight != null) {
            stmt.bindString(21, antennaheight);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LineData readEntity(Cursor cursor, int offset) {
        LineData entity = new LineData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // eci
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // enodebid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cellname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // linenum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BBUnum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RRUnum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pci
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // frequency
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // workfrequency
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // downbandwidth
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lng
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lat
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Coveragetype
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // dishi
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // quxian
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // lineservice
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // linetype
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // directionangle
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // mechanicalinclination
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // antennaheight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LineData entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEci(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnodebid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCellname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLinenum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBBUnum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRRUnum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPci(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFrequency(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWorkfrequency(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDownbandwidth(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLng(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLat(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCoveragetype(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDishi(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQuxian(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLineservice(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLinetype(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDirectionangle(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMechanicalinclination(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAntennaheight(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LineData entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LineData entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LineData entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
